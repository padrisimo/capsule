{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["unityContext","UnityContext","loaderUrl","dataUrl","frameworkUrl","codeUrl","App","useState","jumpCount","setJumpCount","sandMode","setSandMode","useEffect","on","crounch","console","log","className","type","onClick","send","style","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAGMA,EAAe,IAAIC,eAAa,CACpCC,UAAW,8BACXC,QAAS,kCACTC,aAAc,0CACdC,QAAS,oCAiCIC,MA9Bf,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAkBb,OAfAC,qBACE,WACEZ,EAAaa,GAAG,QAAQ,SAAUC,GAChCC,QAAQC,IAAI,WAAYF,GACxBL,EAAaD,EAAY,QAG7B,CAACA,IASD,qCACE,sBAAKS,UAAU,SAAf,UACE,0CAAaT,KACb,+CACa,uBAAOU,KAAK,WAAWC,QAAS,kBATjDR,GAAaD,QACbV,EAAaoB,KAAK,UAAW,iBAAmBV,EAAe,EAAJ,YAWzD,cAAC,IAAD,CAAOW,MAAO,CAAEC,SAAU,SAAWtB,aAAcA,QCxB1CuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d134b4d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Unity, { UnityContext } from 'react-unity-webgl';\n\nconst unityContext = new UnityContext({\n  loaderUrl: 'build/capsulecorp.loader.js',\n  dataUrl: 'build/capsulecorp.data.unityweb',\n  frameworkUrl: 'build/capsulecorp.framework.js.unityweb',\n  codeUrl: 'build/capsulecorp.wasm.unityweb',\n});\n\nfunction App() {\n  const [jumpCount, setJumpCount] = useState(0);\n  const [sandMode, setSandMode] = useState(false);\n  useEffect(\n    function () {\n      unityContext.on('Jump', function (crounch) {\n        console.log('saltando', crounch);\n        setJumpCount(jumpCount + 1);\n      });\n    },\n    [jumpCount]\n  );\n\n  const toggleSandMode = () => {\n    setSandMode(!sandMode);\n    unityContext.send(\"Capsule\", \"ToggleSandMode\", !sandMode ? 1 : 0);\n  };\n\n  return (\n    <>\n      <div className=\"topbar\">\n        <span>jumps:{jumpCount}</span>\n        <span>\n          sand mode: <input type=\"checkbox\" onClick={() => toggleSandMode()} />\n        </span>\n      </div>\n      <Unity style={{ maxWidth: '100vw' }} unityContext={unityContext} />\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}